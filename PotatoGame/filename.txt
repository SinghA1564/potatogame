<!DOCTYPE html>

<html>

<head>

    <script src="https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.js"></script>

</head>

<body>

    <script>

    var config = {
        type: Phaser.AUTO,
        width: 1200,
        height: 700,
        physics: {
            default: 'arcade',
        },

        scene: {
            preload: preload,
            create: create,
            update: update,
        }

    };

    class Player extends Phaser.Physics.Arcade.Sprite
    {
        totalJumps = 30000;
        currentJumps = 0;
        constructor(scene, x, y)
        {
            super(scene, x, y, 'player');
            scene.add.existing(this);
            scene.physics.add.existing(this);
            this.setScale(2);
            this.setCollideWorldBounds(false);
            this.setGravityY(3000); //We will set gravity *per object* rather than for the scene!
        }
    }

    var game = new Phaser.Game(config);

    //Game Objects
    var platforms; 
    var skys
    var player;

    //Keyboard controls
    var cursors;
    var keys;
    var space;

    var camera

    //var newCamera = new camera(0, 0, 1000, 1000)
    //this.game.camera = newCamera

    //var newCam = this.cameras.main


    function preload()
    {
        this.load.image('sky', 'assets/clouds.png');
        this.load.image('platform', 'assets/platform.png');
        this.load.image('player', 'assets/wabbit.png');
    }

    function create()
    {
        camera = this.cameras.main;
        //Set the background origin to be at (0, 0) or top left corner of the image rather than the center of the image asset
       let background = this.add.tileSprite(0, 0, game.scale.width, game.scale.height, 'sky').setOrigin(0, 0);


       //Create the platforms and the player character set to collide with the platforms
       createPlatforms(this);
       player = new Player(this, 350, 2000);
       this.physics.add.collider(player, platforms);

       //Set up user input
       cursors = this.input.keyboard.createCursorKeys();
       keys = this.input.keyboard.addKeys('A, D');
       space = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);
       space.on('down', jump); //calls jump function when space is pressed
       //newCam.x = 109
       camera.width = 1200
       camera.height = 14000
    }

    function createPlatforms(scene)
    {
        platforms = scene.physics.add.staticGroup();
        skys = scene.physics.add.staticGroup();

        //basePlatform is the floor of the game
        let background2 = skys.create(400, 1100, 'sky');
        let basePlatform = platforms.create(game.scale.width/2, game.scale.height-30, 'platform');
        //basePlatform.setScale(3, 1).refreshBody(); //scales the base platform in the x axis to cover the entire floor

        platforms.create(250, 350, 'platform'); //creates the upper left platform
        platforms.create(950, 500, 'platform'); //creates the bottome right platform
        for (let i=2; i < 100; i++) {
            platforms.create(250, i*300+350, 'platform'); //creates the upper left platform
            platforms.create(950, i*300+500, 'platform');
        }
    }

    function update()
    {
        //Player will not move in the x-axis unless a movement key is being pressed
        player.setVelocityX(0);

        //Player has "drag" on the x-axis meaning they slide a bit after an input
        player.setDragX(1000);

        //When the player lands on the ground, reset currentJumps to 0
        if (player.body.touching.down)
        {
            player.currentJumps = 0;
        }

        //Handle player movements
        if (cursors.left.isDown || keys.A.isDown)
        {
            player.setVelocityX(-400);
        }

        if (cursors.right.isDown || keys.D.isDown)
        {
            player.setVelocityX(400);
        }
        // 100 > 200 200-100 100/2
        //console.log(player.y)  601
        camera.y = camera.y+(((player.y*-1)+500)-camera.y)/10
    }

    function jump(event)
    {
        if (player.body.touching.down)
        {
            player.setVelocityY(-1100);
            player.currentJumps++; //~ player.currentJumps = player.currentJumps + 1
        }
        else if (player.currentJumps < player.totalJumps)
        {
            player.setVelocityY(-800);
            player.currentJumps++;
        }
    }

    </script>

</body>

</html>

